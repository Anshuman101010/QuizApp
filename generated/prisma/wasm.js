
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AnswersScalarFieldEnum = {
  id: 'id',
  session_participant_id: 'session_participant_id',
  question_id: 'question_id',
  selected_option: 'selected_option',
  is_correct: 'is_correct',
  time_taken: 'time_taken',
  points_awarded: 'points_awarded',
  streak_at_time: 'streak_at_time',
  answered_at: 'answered_at'
};

exports.Prisma.OptionsScalarFieldEnum = {
  id: 'id',
  question_id: 'question_id',
  option_text: 'option_text',
  option_index: 'option_index'
};

exports.Prisma.Participant_historyScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  quiz_id: 'quiz_id',
  total_sessions: 'total_sessions',
  total_score: 'total_score',
  total_correct: 'total_correct',
  total_questions: 'total_questions',
  best_streak: 'best_streak',
  last_played: 'last_played'
};

exports.Prisma.QuestionsScalarFieldEnum = {
  id: 'id',
  quiz_id: 'quiz_id',
  type: 'type',
  question: 'question',
  correct_answer: 'correct_answer',
  time_limit: 'time_limit',
  points: 'points',
  category: 'category',
  media_type: 'media_type',
  media_url: 'media_url'
};

exports.Prisma.Quiz_sessionsScalarFieldEnum = {
  id: 'id',
  quiz_id: 'quiz_id',
  host_id: 'host_id',
  code: 'code',
  status: 'status',
  started_at: 'started_at',
  ended_at: 'ended_at'
};

exports.Prisma.QuizzesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  title: 'title',
  description: 'description',
  negative_marking: 'negative_marking',
  team_mode: 'team_mode',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.Session_participantsScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  user_id: 'user_id',
  join_code: 'join_code',
  score: 'score',
  streak: 'streak',
  accuracy: 'accuracy',
  joined_at: 'joined_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  email: 'email',
  role: 'role',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.answersOrderByRelevanceFieldEnum = {
  selected_option: 'selected_option'
};

exports.Prisma.optionsOrderByRelevanceFieldEnum = {
  option_text: 'option_text'
};

exports.Prisma.questionsOrderByRelevanceFieldEnum = {
  question: 'question',
  correct_answer: 'correct_answer',
  category: 'category',
  media_url: 'media_url'
};

exports.Prisma.quiz_sessionsOrderByRelevanceFieldEnum = {
  code: 'code'
};

exports.Prisma.quizzesOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description'
};

exports.Prisma.session_participantsOrderByRelevanceFieldEnum = {
  join_code: 'join_code'
};

exports.Prisma.usersOrderByRelevanceFieldEnum = {
  username: 'username',
  password: 'password',
  email: 'email'
};
exports.questions_type = exports.$Enums.questions_type = {
  multiple_choice: 'multiple_choice',
  true_false: 'true_false',
  short_answer: 'short_answer'
};

exports.questions_media_type = exports.$Enums.questions_media_type = {
  image: 'image',
  video: 'video'
};

exports.quiz_sessions_status = exports.$Enums.quiz_sessions_status = {
  waiting: 'waiting',
  active: 'active',
  paused: 'paused',
  completed: 'completed'
};

exports.quizzes_status = exports.$Enums.quizzes_status = {
  draft: 'draft',
  inactive: 'inactive',
  active: 'active',
  stopped: 'stopped',
  completed: 'completed',
  terminated: 'terminated'
};

exports.users_role = exports.$Enums.users_role = {
  host: 'host',
  participant: 'participant'
};

exports.Prisma.ModelName = {
  answers: 'answers',
  options: 'options',
  participant_history: 'participant_history',
  questions: 'questions',
  quiz_sessions: 'quiz_sessions',
  quizzes: 'quizzes',
  session_participants: 'session_participants',
  users: 'users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
